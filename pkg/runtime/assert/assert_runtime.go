// this file is auto-generated by github.com/grexie/isolates, DO NOT EDIT

package assert

import (
  isolates "github.com/grexie/isolates"
)

var _ = isolates.RegisterRuntime("assert", "/Users/tim/src/grexie/solid/pkg/runtime/assert/assert.go", func (in isolates.FunctionArgs) (*isolates.Value, error) {
  {
    fnName := "notStrictEqual"
    if fn, err := in.Context.CreateFunction(in.ExecutionContext, &fnName, func (in isolates.FunctionArgs) (*isolates.Value, error) {
  actual := in.Arg(in.ExecutionContext, 0)
      expected := in.Arg(in.ExecutionContext, 1)
      message := make([]any, len(in.Args)-2)
      for i, arg := range in.Args[2:] {
        message[i] = arg
      }

      if err := NotStrictEqual(actual, expected, message...); err != nil {
        return nil, err
      } else {
        return nil, nil
      }
    }); err != nil {
      return nil, err
    } else if err := in.Args[1].Set(in.ExecutionContext, "notStrictEqual", fn); err != nil {
      return nil, err
    }
  }

  {
    fnName := "assert"
    if fn, err := in.Context.CreateFunction(in.ExecutionContext, &fnName, func (in isolates.FunctionArgs) (*isolates.Value, error) {
      if err := Assert(); err != nil {
        return nil, err
      } else {
        return nil, nil
      }
    }); err != nil {
      return nil, err
    } else if err := in.Args[1].Set(in.ExecutionContext, "assert", fn); err != nil {
      return nil, err
    } else if err := in.Args[1].Set(in.ExecutionContext, "default", fn); err != nil {
      return nil, err
    }
  }

  return nil, nil
})

