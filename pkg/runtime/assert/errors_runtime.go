// this file is auto-generated by github.com/grexie/isolates, DO NOT EDIT

package assert

import (
  reflect "reflect"
  isolates "github.com/grexie/isolates"
)

var _ = isolates.RegisterRuntime("assert", "errors.go", func (in isolates.FunctionArgs) (*isolates.Value, error) {
  if constructor, err := in.Context.CreateWithName(in.ExecutionContext, "AssertionError", func (in isolates.FunctionArgs) (*AssertionErrorBase, error) {
    var _options AssertionErrorOptions
    if v, err := in.Arg(in.ExecutionContext, 0).Unmarshal(in.ExecutionContext, reflect.TypeOf(&_options).Elem()); err != nil {
      return nil, err
    } else {
      _options = v.Interface().(AssertionErrorOptions)
    }

    return newAssertionError(in.ExecutionContext, _options)
  }); err != nil {
    return nil, err
  } else if err := in.Args[1].Set(in.ExecutionContext, "AssertionError", constructor); err != nil {
    return nil, err
  }

  return nil, nil
})

func (e *AssertionErrorBase) V8FuncToString(in isolates.FunctionArgs) (*isolates.Value, error) {
  result := e.String()
  return in.Context.Create(in.ExecutionContext, result)
}

func (e *AssertionErrorBase) V8GetMessage(in isolates.GetterArgs) (*isolates.Value, error) {
  result := e.Message()
  return in.Context.Create(in.ExecutionContext, result)
}

func (e *AssertionErrorBase) V8GetName(in isolates.GetterArgs) (*isolates.Value, error) {
  result := e.Name()
  return in.Context.Create(in.ExecutionContext, result)
}

func (e *AssertionErrorBase) V8GetActual(in isolates.GetterArgs) (*isolates.Value, error) {
  result := e.Actual()
  return in.Context.Create(in.ExecutionContext, result)
}

func (e *AssertionErrorBase) V8GetExpected(in isolates.GetterArgs) (*isolates.Value, error) {
  result := e.Expected()
  return in.Context.Create(in.ExecutionContext, result)
}

func (e *AssertionErrorBase) V8GetOperator(in isolates.GetterArgs) (*isolates.Value, error) {
  result := e.Operator()
  return in.Context.Create(in.ExecutionContext, result)
}

func (e *AssertionErrorBase) V8GetCode(in isolates.GetterArgs) (*isolates.Value, error) {
  result := e.Code()
  return in.Context.Create(in.ExecutionContext, result)
}

func (e *AssertionErrorBase) V8GetGeneratedMessage(in isolates.GetterArgs) (*isolates.Value, error) {
  result := e.GeneratedMessage()
  return in.Context.Create(in.ExecutionContext, result)
}