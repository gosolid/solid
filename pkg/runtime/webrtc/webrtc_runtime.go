// this file is auto-generated by github.com/grexie/isolates, DO NOT EDIT

package webrtc

import (
  reflect "reflect"
  isolates "github.com/grexie/isolates"
)

var _ = isolates.RegisterRuntime("webrtc", "webrtc.go", func (in isolates.FunctionArgs) (*isolates.Value, error) {
  if _, err := in.Context.CreateWithName(in.ExecutionContext, "PeerConnection", func (in isolates.FunctionArgs) (*PeerConnection, error) {
    var _id ID
    if v, err := in.Arg(in.ExecutionContext, 0).Unmarshal(in.ExecutionContext, reflect.TypeOf(&_id).Elem()); err != nil {
      return nil, err
    } else {
      _id = v.Interface().(ID)
    }

    var _iceServers []string
    if v, err := in.Arg(in.ExecutionContext, 1).Unmarshal(in.ExecutionContext, reflect.TypeOf(&_iceServers).Elem()); err != nil {
      return nil, err
    } else if v != nil {
      _iceServers = v.Interface().([]string)
    }

    return NewPeerConnection(_id, _iceServers)
  }); err != nil {
    return nil, err
  }

  return nil, nil
})

func (rtc *WebRTC) V8FuncCreatePeerConnection(in isolates.FunctionArgs) (*isolates.Value, error) {
  var id ID
  if v, __err := in.Arg(in.ExecutionContext, 0).Unmarshal(in.ExecutionContext, reflect.TypeOf(&id).Elem()); __err != nil {
    return nil, __err
  } else {
    id = v.Interface().(ID)
  }

  var iceServers []string
  if v, __err := in.Arg(in.ExecutionContext, 1).Unmarshal(in.ExecutionContext, reflect.TypeOf(&iceServers).Elem()); __err != nil {
    return nil, __err
  } else if v != nil {
    iceServers = v.Interface().([]string)
  }

  if result, err := rtc.NewPeerConnection(id, iceServers); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}

func (c *PeerConnection) V8FuncWait(in isolates.FunctionArgs) (*isolates.Value, error) {
  if resolver, err := in.Context.NewResolver(in.ExecutionContext); err != nil {
    return nil, err
  } else {
    in.Background(func(in isolates.FunctionArgs) {
      if err := c.Wait(); err != nil {
        resolver.Reject(in.ExecutionContext, err)
      } else if result, err := in.Context.Undefined(in.ExecutionContext); err != nil {
        resolver.Reject(in.ExecutionContext, err)
      } else {
        resolver.Resolve(in.ExecutionContext, result)
      }
    })

    return resolver.Promise(in.ExecutionContext)
  }
}

func (c *PeerConnection) V8GetState(in isolates.GetterArgs) (*isolates.Value, error) {
  result := c.State()
  return in.Context.Create(in.ExecutionContext, result)
}

func (c *PeerConnection) V8FuncCreateDataChannel(in isolates.FunctionArgs) (*isolates.Value, error) {
  var options *DataChannelOptions
  if v, __err := in.Arg(in.ExecutionContext, 0).Unmarshal(in.ExecutionContext, reflect.TypeOf(&options).Elem()); __err != nil {
    return nil, __err
  } else if v != nil {
    options = v.Interface().(*DataChannelOptions)
  }

  if result, err := c.CreateDataChannel(options); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}

func (c *PeerConnection) V8FuncClose(in isolates.FunctionArgs) (*isolates.Value, error) {
  if err := c.Close(); err != nil {
    return nil, err
  } else {
    return nil, nil
  }
}

func (c *PeerConnection) V8FuncCreateOffer(in isolates.FunctionArgs) (*isolates.Value, error) {
  if result, err := c.CreateOffer(); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}

func (c *PeerConnection) V8FuncCreateAnswer(in isolates.FunctionArgs) (*isolates.Value, error) {
  var offer *SessionDescription
  if v, __err := in.Arg(in.ExecutionContext, 0).Unmarshal(in.ExecutionContext, reflect.TypeOf(&offer).Elem()); __err != nil {
    return nil, __err
  } else if v != nil {
    offer = v.Interface().(*SessionDescription)
  }

  if result, err := c.CreateAnswer(offer); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}

func (c *PeerConnection) V8FuncAddICECandidate(in isolates.FunctionArgs) (*isolates.Value, error) {
  var candidate *ICECandidate
  if v, __err := in.Arg(in.ExecutionContext, 0).Unmarshal(in.ExecutionContext, reflect.TypeOf(&candidate).Elem()); __err != nil {
    return nil, __err
  } else if v != nil {
    candidate = v.Interface().(*ICECandidate)
  }

  if err := c.AddICECandidate(candidate); err != nil {
    return nil, err
  } else {
    return nil, nil
  }
}

func (c *PeerConnection) V8GetChannels(in isolates.GetterArgs) (*isolates.Value, error) {
  result := c.DataChannels()
  return in.Context.Create(in.ExecutionContext, result)
}

func (d *DataChannel) V8GetLabel(in isolates.GetterArgs) (*isolates.Value, error) {
  result := d.Label()
  return in.Context.Create(in.ExecutionContext, result)
}

func (d *DataChannel) V8GetIsOpen(in isolates.GetterArgs) (*isolates.Value, error) {
  result := d.IsOpen()
  return in.Context.Create(in.ExecutionContext, result)
}

func (d *DataChannel) V8FuncClose(in isolates.FunctionArgs) (*isolates.Value, error) {
  if err := d.Close(); err != nil {
    return nil, err
  } else {
    return nil, nil
  }
}

func (d *DataChannel) V8FuncRead(in isolates.FunctionArgs) (*isolates.Value, error) {
  var bytes []byte
  if v, __err := in.Arg(in.ExecutionContext, 0).Unmarshal(in.ExecutionContext, reflect.TypeOf(&bytes).Elem()); __err != nil {
    return nil, __err
  } else if v != nil {
    bytes = v.Interface().([]byte)
  }

  if result, err := d.Read(bytes); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}

func (d *DataChannel) V8FuncWrite(in isolates.FunctionArgs) (*isolates.Value, error) {
  var bytes []byte
  if v, __err := in.Arg(in.ExecutionContext, 0).Unmarshal(in.ExecutionContext, reflect.TypeOf(&bytes).Elem()); __err != nil {
    return nil, __err
  } else if v != nil {
    bytes = v.Interface().([]byte)
  }

  if result, err := d.Write(bytes); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}