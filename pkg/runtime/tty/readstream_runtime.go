// this file is auto-generated by github.com/grexie/isolates, DO NOT EDIT

package tty

import (
  reflect "reflect"
  isolates "github.com/grexie/isolates"
)

var _ = isolates.RegisterRuntime("tty", "readstream.go", func (in isolates.FunctionArgs) (*isolates.Value, error) {
  if constructor, err := in.Context.CreateWithName(in.ExecutionContext, "ReadStream", func (in isolates.FunctionArgs) (*ReadStreamBase, error) {
    return NewReadStream(in)
  }); err != nil {
    return nil, err
  } else if err := in.Args[1].Set(in.ExecutionContext, "ReadStream", constructor); err != nil {
    return nil, err
  }

  return nil, nil
})

func (r *ReadStreamBase) V8GetIsRaw(in isolates.GetterArgs) (*isolates.Value, error) {
  result := r.IsRaw()
  return in.Context.Create(in.ExecutionContext, result)
}

func (r *ReadStreamBase) V8GetIsTTY(in isolates.GetterArgs) (*isolates.Value, error) {
  result := r.IsTTY()
  return in.Context.Create(in.ExecutionContext, result)
}

func (r *ReadStreamBase) V8FuncSetRawMode(in isolates.FunctionArgs) (*isolates.Value, error) {
  var mode bool
  if v, __err := in.Arg(in.ExecutionContext, 0).Unmarshal(in.ExecutionContext, reflect.TypeOf(&mode).Elem()); __err != nil {
    return nil, __err
  } else {
    mode = v.Interface().(bool)
  }

  if result, err := r.SetRawMode(in, mode); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}