// this file is auto-generated by github.com/grexie/isolates, DO NOT EDIT

package tty

import (
  isolates "github.com/grexie/isolates"
)

var _ = isolates.RegisterRuntime("tty", "writestream.go", func (in isolates.FunctionArgs) (*isolates.Value, error) {
  if constructor, err := in.Context.CreateWithName(in.ExecutionContext, "WriteStream", func (in isolates.FunctionArgs) (*WriteStreamBase, error) {
    return NewWriteStream(in)
  }); err != nil {
    return nil, err
  } else if err := in.Args[1].Set(in.ExecutionContext, "WriteStream", constructor); err != nil {
    return nil, err
  }

  return nil, nil
})

func (w *WriteStreamBase) V8GetIsTTY(in isolates.GetterArgs) (*isolates.Value, error) {
  result := w.IsTTY()
  return in.Context.Create(in.ExecutionContext, result)
}

func (w *WriteStreamBase) V8FuncClear(in isolates.FunctionArgs) (*isolates.Value, error) {
  if err := w.Clear(); err != nil {
    return nil, err
  } else {
    return nil, nil
  }
}

func (w *WriteStreamBase) V8FuncGetWindowSize(in isolates.FunctionArgs) (*isolates.Value, error) {
  if result, err := w.GetWindowSize(); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}

func (w *WriteStreamBase) V8GetRows(in isolates.GetterArgs) (*isolates.Value, error) {
  if result, err := w.Rows(); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}

func (w *WriteStreamBase) V8GetColumns(in isolates.GetterArgs) (*isolates.Value, error) {
  if result, err := w.Columns(); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}