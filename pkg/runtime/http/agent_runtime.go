// this file is auto-generated by github.com/grexie/isolates, DO NOT EDIT

package http

import (
  net "github.com/gosolid/solid/pkg/runtime/net"
  reflect "reflect"
  isolates "github.com/grexie/isolates"
)

var _ = isolates.RegisterRuntime("http", "agent.go", func (in isolates.FunctionArgs) (*isolates.Value, error) {
  return nil, nil
})

func (a *AgentBase) V8FuncCreateConnection(in isolates.FunctionArgs) (*isolates.Value, error) {
  var options net.ConnectOptions
  if v, __err := in.Arg(in.ExecutionContext, 0).Unmarshal(in.ExecutionContext, reflect.TypeOf(&options).Elem()); __err != nil {
    return nil, __err
  } else {
    options = v.Interface().(net.ConnectOptions)
  }

  connectListener := in.Arg(in.ExecutionContext, 1)
  if result, err := a.CreateConnection(in.ExecutionContext, options, connectListener); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}

func (a *AgentBase) V8FuncGetName(in isolates.FunctionArgs) (*isolates.Value, error) {
  var options AgentRequestOptions
  if v, __err := in.Arg(in.ExecutionContext, 0).Unmarshal(in.ExecutionContext, reflect.TypeOf(&options).Elem()); __err != nil {
    return nil, __err
  } else {
    options = v.Interface().(AgentRequestOptions)
  }

  if result, err := a.GetName(in.ExecutionContext, options); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}