// this file is auto-generated by github.com/grexie/isolates, DO NOT EDIT

package util

import (
  isolates "github.com/grexie/isolates"
)

var _ = isolates.RegisterRuntime("util", "/Users/tim/src/grexie/solid/pkg/runtime/util/format.go", func (in isolates.FunctionArgs) (*isolates.Value, error) {
  {
    fnName := "format"
    if fn, err := in.Context.CreateFunction(in.ExecutionContext, &fnName, func (in isolates.FunctionArgs) (*isolates.Value, error) {
  argsv := make([]any, len(in.Args)-0)
      for i, arg := range in.Args[0:] {
        argsv[i] = arg
      }

      if result, err := Format(in.ExecutionContext, argsv...); err != nil {
        return nil, err
      } else {
        return in.Context.Create(in.ExecutionContext, result)
      }
    }); err != nil {
      return nil, err
    } else if err := in.Args[1].Set(in.ExecutionContext, "format", fn); err != nil {
      return nil, err
    }
  }

  {
    fnName := "formatWithOptions"
    if fn, err := in.Context.CreateFunction(in.ExecutionContext, &fnName, func (in isolates.FunctionArgs) (*isolates.Value, error) {
  options := in.Arg(in.ExecutionContext, 0)
      argsv := make([]any, len(in.Args)-1)
      for i, arg := range in.Args[1:] {
        argsv[i] = arg
      }

      if result, err := FormatWithOptions(in.ExecutionContext, options, argsv...); err != nil {
        return nil, err
      } else {
        return in.Context.Create(in.ExecutionContext, result)
      }
    }); err != nil {
      return nil, err
    } else if err := in.Args[1].Set(in.ExecutionContext, "formatWithOptions", fn); err != nil {
      return nil, err
    }
  }

  return nil, nil
})

