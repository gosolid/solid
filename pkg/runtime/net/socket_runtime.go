// this file is auto-generated by github.com/grexie/isolates, DO NOT EDIT

package net

import (
  isolates "github.com/grexie/isolates"
)

var _ = isolates.RegisterRuntime("net", "/Users/tim/src/grexie/solid/pkg/runtime/net/socket.go", func (in isolates.FunctionArgs) (*isolates.Value, error) {
  return nil, nil
})

func (s *SocketBase) V8FuncAddress(in isolates.FunctionArgs) (*isolates.Value, error) {
  if result, err := s.Address(in.ExecutionContext); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}

func (s *SocketBase) V8GetLocalAddress(in isolates.GetterArgs) (*isolates.Value, error) {
  if result, err := s.LocalAddress(in.ExecutionContext); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}

func (s *SocketBase) V8GetLocalPort(in isolates.GetterArgs) (*isolates.Value, error) {
  if result, err := s.LocalPort(in.ExecutionContext); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}

func (s *SocketBase) V8GetLocalFamily(in isolates.GetterArgs) (*isolates.Value, error) {
  if result, err := s.LocalFamily(in.ExecutionContext); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}

func (s *SocketBase) V8GetRemoteAddress(in isolates.GetterArgs) (*isolates.Value, error) {
  if result, err := s.RemoteAddress(in.ExecutionContext); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}

func (s *SocketBase) V8GetRemotePort(in isolates.GetterArgs) (*isolates.Value, error) {
  if result, err := s.RemotePort(in.ExecutionContext); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}

func (s *SocketBase) V8GetRemoteFamily(in isolates.GetterArgs) (*isolates.Value, error) {
  if result, err := s.RemoteFamily(in.ExecutionContext); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}

func (s *SocketBase) V8FuncSetTimeout(in isolates.FunctionArgs) (*isolates.Value, error) {
  if err := s.SetTimeout(in.ExecutionContext); err != nil {
    return nil, err
  } else {
    return nil, nil
  }
}

func (s *SocketBase) V8FuncSetNoDelay(in isolates.FunctionArgs) (*isolates.Value, error) {
  if err := s.SetNoDelay(in.ExecutionContext); err != nil {
    return nil, err
  } else {
    return nil, nil
  }
}