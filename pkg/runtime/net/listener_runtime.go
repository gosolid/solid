// this file is auto-generated by github.com/grexie/isolates, DO NOT EDIT

package net

import (
  isolates "github.com/grexie/isolates"
)

var _ = isolates.RegisterRuntime("net", "listener.go", func (in isolates.FunctionArgs) (*isolates.Value, error) {
  return nil, nil
})

func (l *listener) V8FuncClose(in isolates.FunctionArgs) (*isolates.Value, error) {
  if resolver, err := in.Context.NewResolver(in.ExecutionContext); err != nil {
    return nil, err
  } else {
    in.Background(func(in isolates.FunctionArgs) {
      if err := l.Close(in.ExecutionContext); err != nil {
        resolver.Reject(in.ExecutionContext, err)
      } else if result, err := in.Context.Undefined(in.ExecutionContext); err != nil {
        resolver.Reject(in.ExecutionContext, err)
      } else {
        resolver.Resolve(in.ExecutionContext, result)
      }
    })

    return resolver.Promise(in.ExecutionContext)
  }
}

func (l *listener) V8GetListener(in isolates.GetterArgs) (*isolates.Value, error) {
  result := l.Listener()
  return in.Context.Create(in.ExecutionContext, result)
}

func (l *listener) V8FuncAddress(in isolates.FunctionArgs) (*isolates.Value, error) {
  if result, err := l.Address(in.ExecutionContext); err != nil {
    return nil, err
  } else {
    return in.Context.Create(in.ExecutionContext, result)
  }
}